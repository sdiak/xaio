// extern crate autocfg;
extern crate cbindgen;
use std::env;

#[allow(clippy::field_reassign_with_default)]
fn main() {
    // cc::Build::new()
    //     .file("src/build/probe.c") /* .file("bar.c")*/
    //     .compile("foo");
    // let ac = autocfg::new();
    let crate_dir = env::var("CARGO_MANIFEST_DIR").unwrap();
    let mut config: cbindgen::Config = Default::default();
    config.language = cbindgen::Language::C;
    config.cpp_compat = true;
    config.include_guard = Some("XAIO_H".into());
    config.autogen_warning = Some(
        "/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */".into(),
    );
    config.no_includes = true;
    config.sys_includes = vec!["stdint.h".into(), "stdbool.h".into(), "stddef.h".into()];
    config.after_includes = Some(
        r"
#ifndef _Nonnull
#   define _Nonnull
#endif
#ifndef AtomicUsize
#   define AtomicUsize _Atomic uintptr_t
#endif
#if !defined(__GNUC__) && !defined(__clang__)
#   define __attribute__()
#endif
#if defined(_WIN32) || defined(_WIN64)
    typedef uintptr_t xsocket_t;
    typedef void *xfile_t;
#else
    typedef int xsocket_t;
    typedef int xfile_t;
#endif
    "
        .into(),
    );
    config.documentation = true;
    config.documentation_style = cbindgen::DocumentationStyle::Doxy;
    config.style = cbindgen::Style::Tag;
    config.pointer.non_null_attribute = Some("_Nonnull".into());
    config.function.must_use = Some("__attribute__((warn_unused_result))".into());
    config.function.deprecated = Some("__attribute__((deprecated))".into());
    config.function.no_return = Some("__attribute__((noreturn))".into());
    cbindgen::Builder::new()
        .with_crate(crate_dir)
        .with_config(config)
        .generate()
        .expect("Unable to generate bindings")
        .write_to_file("include/xaio.h");
    // ac.emit_constant_cfg("libc::MSG_DONTWAIT", "has_libc_MSG_DONTWAIT"); // libc::MSG_DONTWAIT
    // ac.probe_raw("extern crate  libc; pub const PROBE: () = ((), libc::MSG_DONTWAIT).0;")
    //     .unwrap();
    // if ac.probe_raw("fn main() {}").is_ok() {
    //     autocfg::emit("has_libc_MSG_DONTWAIT");
    // }
    // autocfg::rerun_path("build.rs");
}
